# Ejecuta con cada push a main
trigger:
- main

# --- POOL ---
pool:
  vmImage: 'ubuntu-latest'   # agente hospedado de MS

# --- VARIABLES ---
variables:
  NODE_VERSION: '20.x'
  APP_NAME: 'clock-weather-jose'       # <- nombre exacto del App Service
  AZURE_SUBSCRIPTION: 'az-conn-appsvc' # <- tu Service Connection
  STAGING: '$(Build.ArtifactStagingDirectory)/app'   # <-- barras / (Linux)

steps:
# 1) Node en el agente
- task: NodeTool@0
  inputs:
    versionSpec: '$(NODE_VERSION)'
  displayName: 'Use Node $(NODE_VERSION)'

# (Opcional) Build del FRONT (no se deploya)
- script: |
    npm ci
    npm run build
  workingDirectory: 'clock-weather-client'
  displayName: 'Build client (Vite) [opcional]'

# 2) Instalar dependencias del SERVER (prod)
- script: |
    npm ci --omit=dev
  workingDirectory: 'server'
  displayName: 'Install server deps (prod)'

# 3) Stage SOLO el contenido de server/ en la RAÍZ del ZIP
- task: Bash@3
  displayName: 'Stage server/ at ZIP root'
  inputs:
    targetType: 'inline'
    script: |
      st="$(Build.ArtifactStagingDirectory)/app"
      mkdir -p "$st"
      cp -R server/* "$st"/
      echo "Contenido staged en: $st"
      # Debe listar .../app/package.json (no .../app/server/package.json)
      find "$st" -maxdepth 2 -type f -print

# 4) Crear el ZIP (la raíz debe contener package.json e index.js)
- task: ArchiveFiles@2
  displayName: 'Archive app.zip'
  inputs:
    rootFolderOrFile: '$(STAGING)'                          # <-- ahora coincide
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip' # <-- barras /
    replaceExistingArchive: true

# 5) Deploy al Azure App Service (Linux)
- task: AzureWebApp@1
  displayName: 'Deploy to Azure App Service'
  inputs:
    azureSubscription: '$(AZURE_SUBSCRIPTION)'
    appType: 'webAppLinux'
    appName: '$(APP_NAME)'
    package: '$(Build.ArtifactStagingDirectory)/app.zip'     # <-- barras /
